import os
import io
import streamlit as st
import requests
from gtts import gTTS
from groq import Groq
from dotenv import load_dotenv
import langdetect
import re

# Chargement des variables d'environnement
load_dotenv()

# Configuration de la page
st.set_page_config(
    page_title="DialogAI",
    page_icon="üí¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© pour am√©liorer l'apparence
st.markdown("""
<style>
    .main-header {
        font-size: 3rem !important;
        color: #1E90FF;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem !important;
        color: #4682B4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .author {
        font-size: 1.2rem !important;
        color: #6495ED;
        text-align: center;
        font-style: italic;
        margin-bottom: 2rem;
    }
    .menu-item {
        background-color: #f0f8ff;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 15px;
        box-shadow: 2px 2px 5px rgba(0,0,0,0.1);
        transition: transform 0.3s;
    }
    .menu-item:hover {
        transform: scale(1.02);
        box-shadow: 3px 3px 7px rgba(0,0,0,0.2);
    }
    .api-input {
        background-color: #f9f9f9;
        padding: 15px;
        border-radius: 5px;
        margin-top: 10px;
        margin-bottom: 20px;
    }
    .chat-message {
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 10px;
    }
    .user-message {
        background-color: #e6f7ff;
        text-align: right;
    }
    .bot-message {
        background-color: #f0f0f0;
    }
    .result-container {
        background-color: #f5f5f5;
        padding: 20px;
        border-radius: 10px;
        margin-top: 20px;
        margin-bottom: 20px;
    }
    .tooltip {
        position: relative;
        display: inline-block;
        border-bottom: 1px dotted black;
    }
    .tooltip .tooltiptext {
        visibility: hidden;
        width: 200px;
        background-color: #555;
        color: #fff;
        text-align: center;
        border-radius: 6px;
        padding: 5px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -100px;
        opacity: 0;
        transition: opacity 0.3s;
    }
    .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }
</style>
""", unsafe_allow_html=True)

# Fonction pour nettoyer les r√©ponses du chatbot (enlever les balises HTML parasites)
def clean_bot_response(response):
    """
    Nettoie la r√©ponse du chatbot en supprimant les balises HTML parasites
    """
    # Supprimer les balises div, span et autres balises HTML communes
    cleaned = re.sub(r'</?div[^>]*>', '', response)
    cleaned = re.sub(r'</?span[^>]*>', '', cleaned)
    cleaned = re.sub(r'</?p[^>]*>', '', cleaned)
    cleaned = re.sub(r'</?br[^>]*>', '', cleaned)
    
    # Supprimer les balises HTML restantes de mani√®re g√©n√©rale
    cleaned = re.sub(r'<[^>]+>', '', cleaned)
    
    # Nettoyer les espaces multiples
    cleaned = re.sub(r'\s+', ' ', cleaned).strip()
    
    return cleaned

# Initialisation des variables de session si elles n'existent pas
if 'last_response' not in st.session_state:
    st.session_state.last_response = ""
if 'summary_text' not in st.session_state:
    st.session_state.summary_text = ""
if 'current_page' not in st.session_state:
    st.session_state.current_page = "accueil"
# Suppression de la persistence des cl√©s API
if 'groq_api_key' not in st.session_state:
    st.session_state.groq_api_key = ""
if 'hf_api_key' not in st.session_state:
    st.session_state.hf_api_key = ""

# Barre lat√©rale avec navigation
with st.sidebar:
    st.image("https://img.icons8.com/fluency/96/000000/chat.png", width=100)
    
    st.subheader("Navigation")
    if st.button("üè† Accueil", key="nav_accueil"):
        st.session_state.current_page = "accueil"
        st.rerun()
    
    # Section API avec saisie obligatoire √† chaque session
    st.subheader("üîë Cl√©s API")
    
    st.session_state.groq_api_key = st.text_input("ü§ñ Cl√© API Groq", 
                                                  value="", 
                                                  type="password",
                                                  placeholder="Saisissez votre cl√© API Groq",
                                                  help="N√©cessaire pour le chat avec l'IA")
    
    st.session_state.hf_api_key = st.text_input("ü§ó Cl√© API Hugging Face", 
                                                value="", 
                                                type="password",
                                                placeholder="Saisissez votre cl√© API HF",
                                                help="N√©cessaire pour la g√©n√©ration de r√©sum√©s")
    
    # Indicateurs de statut des API (seulement si les cl√©s sont pr√©sentes)
    if st.session_state.groq_api_key:
        st.success("‚úÖ Cl√© Groq configur√©e")
        
    if st.session_state.hf_api_key:
        st.success("‚úÖ Cl√© HF configur√©e")
    
    st.markdown("---")
    
    # Autres boutons de navigation
    if st.button("üí¨ Chat", key="nav_chat"):
        st.session_state.current_page = "chat"
        st.rerun()
    if st.button("üìù R√©sum√©", key="nav_resume"):
        st.session_state.current_page = "resume"
        st.rerun()
    if st.button("üîä Audio", key="nav_audio"):
        st.session_state.current_page = "audio"
        st.rerun()
    if st.button("‚öôÔ∏è Configuration", key="nav_config"):
        st.session_state.current_page = "config"
        st.rerun()

# Page d'accueil
if st.session_state.current_page == "accueil":
    st.markdown("<h1 class='main-header'>Bienvenue sur DialogAI</h1>", unsafe_allow_html=True)
    
    st.markdown("""
    <p class='sub-header'>Une application intelligente qui vous permet de discuter avec un chatbot, 
    de r√©sumer les conversations et de les √©couter gr√¢ce √† la synth√®se vocale.</p>
    """, unsafe_allow_html=True)
    
    st.markdown("<p class='author'>‚ú® Fonctionnalit√©s  </p>", unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class='menu-item'>
            <h3>üí¨ Chat avec IA</h3>
            <p>Discutez avec un mod√®le d'IA avanc√© et obtenez des r√©ponses intelligentes √† vos questions.</p>
            <br>
        </div>
        """, unsafe_allow_html=True)
        if st.button("Acc√©der au Chat", key="btn_chat"):
            st.session_state.current_page = "chat"
            st.rerun()
            
    with col2:
        st.markdown("""
        <div class='menu-item'>
            <h3>üìù R√©sum√© de texte</h3>
            <p>G√©n√©rez automatiquement un r√©sum√© concis de vos conversations avec l'IA.</p>
            <br>
        </div>
        """, unsafe_allow_html=True)
        if st.button("Cr√©er un r√©sum√©", key="btn_resume"):
            st.session_state.current_page = "resume"
            st.rerun()
            
    with col3:
        st.markdown("""
        <div class='menu-item'>
            <h3>üîä Synth√®se vocale</h3>
            <p>√âcoutez les r√©sum√©s de vos conversations gr√¢ce √† la technologie de synth√®se vocale.</p>
            <br>
        </div>
        """, unsafe_allow_html=True)
        if st.button("√âcouter en audio", key="btn_audio"):
            st.session_state.current_page = "audio"
            st.rerun()

# Page de chat
elif st.session_state.current_page == "chat":
    st.title("üí¨ Chat avec IA")
    
    st.info("Cette page vous permet de discuter avec un mod√®le d'IA avanc√©. Posez vos questions et obtenez des r√©ponses d√©taill√©es.")
    
    # V√©rification de la cl√© API
    if not st.session_state.groq_api_key:
        st.error("‚ùå Cl√© API Groq manquante. Veuillez la configurer dans la barre lat√©rale.")
    else:
        # Interface de chat
        message = st.text_input("Entrez votre message:", key="chat_input")
        
        # Mod√®le fix√© √† Gemma2-9b-It
        model = "gemma2-9b-it"
        
        if st.button("Envoyer", key="send_chat"):
            if message:
                try:
                    # Utiliser le client Groq pour obtenir une r√©ponse
                    client = Groq(api_key=st.session_state.groq_api_key)
                    
                    # D√©tecter la langue du message
                    try:
                        langue_message = langdetect.detect(message)
                    except:
                        langue_message = 'fr'  # Par d√©faut en fran√ßais en cas d'erreur
                    
                    # Cr√©er un syst√®me prompt qui demande de r√©pondre dans la m√™me langue
                    system_prompt = ""
                    if langue_message == 'en':
                        system_prompt = "Please respond in English to the user's queries. Provide clear and helpful responses without any HTML tags or formatting."
                    else:
                        system_prompt = "Veuillez r√©pondre en fran√ßais aux questions de l'utilisateur. Fournissez des r√©ponses claires et utiles sans balises HTML ou formatage."
                    
                    chat_completion = client.chat.completions.create(
                        messages=[
                            {"role": "system", "content": system_prompt},
                            {"role": "user", "content": message}
                        ],
                        model=model
                    )
                    
                    # Nettoyer la r√©ponse du bot et la stocker
                    bot_response = chat_completion.choices[0].message.content
                    cleaned_response = clean_bot_response(bot_response)
                    st.session_state.last_response = cleaned_response
                    
                    # Afficher la r√©ponse
                    st.markdown(f"""
                    <div class='result-container'>
                        <h4>R√©ponse:</h4>
                        <p>{cleaned_response}</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                except Exception as e:
                    st.error(f"Erreur lors de la communication avec l'API Groq: {str(e)}")
        
        # Bouton pour r√©sumer la derni√®re r√©ponse
        if st.session_state.last_response:
            if st.button("üìù R√©sumer cette r√©ponse", key="go_to_summary"):
                if st.session_state.hf_api_key:
                    st.session_state.current_page = "resume"
                    st.rerun()
                else:
                    st.error("‚ùå Cl√© API Hugging Face manquante pour g√©n√©rer un r√©sum√©.")

# Page de r√©sum√©
elif st.session_state.current_page == "resume":
    st.title("üìù R√©sum√© de conversation")
    
    st.info("Cette page vous permet de r√©sumer la derni√®re r√©ponse de l'IA pour en extraire les points essentiels.")
    
    # V√©rification de la cl√© API
    if not st.session_state.hf_api_key:
        st.error("‚ùå Cl√© API Hugging Face manquante. Veuillez la configurer dans la barre lat√©rale.")
    else:
        # V√©rification qu'il y a une r√©ponse √† r√©sumer
        if st.session_state.last_response:
            if st.button("üîÑ G√©n√©rer le r√©sum√©", key="generate_summary"):
                try:
                    with st.spinner("G√©n√©ration du r√©sum√© en cours..."):
                        # Appel √† l'API Hugging Face pour le r√©sum√©
                        API_URL = "https://api-inference.huggingface.co/models/facebook/bart-large-cnn"
                        headers = {"Authorization": f"Bearer {st.session_state.hf_api_key}"}
                        
                        # D√©tecter la langue du texte
                        try:
                            langue_texte = langdetect.detect(st.session_state.last_response)
                        except:
                            langue_texte = 'fr'  # Par d√©faut en fran√ßais en cas d'erreur
                        
                        # Utiliser des instructions sp√©cifiques √† la langue pour le r√©sum√©
                        prompt = st.session_state.last_response
                        if langue_texte == 'fr':
                            prompt = "R√©sumez ce texte en fran√ßais: " + st.session_state.last_response
                        elif langue_texte == 'en':
                            prompt = "Summarize this text in English: " + st.session_state.last_response
                        
                        response = requests.post(
                            API_URL, 
                            headers=headers, 
                            json={"inputs": prompt}
                        )
                        
                        output = response.json()
                        
                        if isinstance(output, list) and len(output) > 0 and 'summary_text' in output[0]:
                            st.session_state.summary_text = output[0]['summary_text']
                            
                            st.markdown("<div class='result-container'>", unsafe_allow_html=True)
                            st.subheader("‚úÖ R√©sum√© de la r√©ponse")
                            st.write(st.session_state.summary_text)
                            st.markdown("</div>", unsafe_allow_html=True)
                            
                        else:
                            st.error(f"Erreur lors de la g√©n√©ration du r√©sum√©. R√©ponse de l'API: {output}")
                
                except Exception as e:
                    st.error(f"Erreur lors de la communication avec l'API Hugging Face: {str(e)}")
            
            # Boutons d'action si un r√©sum√© existe
            if st.session_state.summary_text:
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("üîä Convertir en audio", key="audio_convert_btn"):
                        st.session_state.current_page = "audio"
                        st.rerun()
                with col2:
                    if st.button("üí¨ Revenir au chat", key="back_to_chat"):
                        st.session_state.current_page = "chat"
                        st.rerun()
        else:
            st.warning("Aucune r√©ponse √† r√©sumer. Veuillez d'abord poser une question au chatbot.")
            
            if st.button("üí¨ Aller au chat", key="goto_chat_from_resume"):
                if st.session_state.groq_api_key:
                    st.session_state.current_page = "chat"
                    st.rerun()
                else:
                    st.error("‚ùå Cl√© API Groq manquante pour acc√©der au chat.")

# Page d'audio
elif st.session_state.current_page == "audio":
    st.title("üîä Synth√®se vocale")
    
    st.info("Cette page vous permet de convertir le r√©sum√© de votre conversation en audio et de l'√©couter.")
    
    if st.session_state.summary_text:
        st.subheader("Texte √† convertir en audio")
        speech_text = st.text_area("Vous pouvez modifier le texte avant de g√©n√©rer l'audio:", value=st.session_state.summary_text, height=200)
        
        # D√©tection automatique de la langue (fran√ßais ou anglais)
        try:
            langue = langdetect.detect(speech_text)
            if langue == 'fr':
                langue_affichee = "Fran√ßais"
            elif langue == 'en':
                langue_affichee = "Anglais"
            else:
                # Par d√©faut, utiliser le fran√ßais si la langue n'est ni fran√ßaise ni anglaise
                langue = 'fr'
                langue_affichee = "Fran√ßais (par d√©faut)"
                
            st.info(f"üåê Langue d√©tect√©e: {langue_affichee}")
        except:
            # En cas d'erreur de d√©tection, utiliser le fran√ßais par d√©faut
            langue = 'fr'
            st.info("üåê Langue d√©tect√©e: Fran√ßais (par d√©faut)")
        
        # Bouton pour g√©n√©rer l'audio
        if st.button("üîÑ G√©n√©rer l'audio", key="generate_audio"):
            if speech_text.strip() == "":
                st.warning("‚ùó Veuillez entrer un texte.")
            else:
                try:
                    with st.spinner("G√©n√©ration de l'audio en cours..."):
                        # G√©n√©ration de l'audio
                        tts = gTTS(text=speech_text, lang=langue, slow=False)
                        
                        # Sauvegarde dans un buffer m√©moire
                        audio_bytes_io = io.BytesIO()
                        tts.write_to_fp(audio_bytes_io)
                        audio_bytes_io.seek(0)
                        
                        st.markdown("<div class='result-container'>", unsafe_allow_html=True)
                        st.subheader("üéµ √âcoutez le r√©sum√©")
                        
                        # Affichage de l'audio dans l'application
                        st.audio(audio_bytes_io, format="audio/mp3")
                        
                        # Bouton de t√©l√©chargement
                        st.download_button(
                            label="‚¨áÔ∏è T√©l√©charger l'audio",
                            data=audio_bytes_io,
                            file_name="dialogue_resume.mp3",
                            mime="audio/mp3"
                        )
                        st.markdown("</div>", unsafe_allow_html=True)
                
                except Exception as e:
                    st.error(f"Erreur lors de la g√©n√©ration de l'audio: {str(e)}")
        
        # Navigation
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üìù Revenir au r√©sum√©", key="back_to_summary"):
                st.session_state.current_page = "resume"
                st.rerun()
        with col2:
            if st.button("üí¨ Revenir au chat", key="back_to_chat_from_audio"):
                st.session_state.current_page = "chat"
                st.rerun()
    else:
        st.warning("Aucun r√©sum√© √† convertir en audio. Veuillez d'abord g√©n√©rer un r√©sum√©.")
        
        if st.button("üìù Aller au r√©sum√©", key="goto_resume_from_audio"):
            if st.session_state.hf_api_key:
                st.session_state.current_page = "resume"
                st.rerun()
            else:
                st.error("‚ùå Cl√© API Hugging Face manquante pour g√©n√©rer un r√©sum√©.")

# Page de configuration
elif st.session_state.current_page == "config":
    st.title("‚öôÔ∏è Configuration de l'application")
    
    st.info("Cette page vous permet de configurer l'application et d'apprendre √† l'utiliser efficacement.")
    
    # Configuration des API
    st.header("üîë Configuration des cl√©s API")
    
    st.markdown("""
    Pour utiliser toutes les fonctionnalit√©s de DialogAI, vous devez configurer deux cl√©s API √† chaque session:
    
    1. **Cl√© API Groq**: N√©cessaire pour le chat avec l'IA
    2. **Cl√© API Hugging Face**: N√©cessaire pour la g√©n√©ration de r√©sum√©s
    
    üîí **S√©curit√©**: Vos cl√©s API ne sont jamais sauvegard√©es et restent priv√©es.
    """)
    
    with st.expander("ü§ñ Comment obtenir une cl√© API Groq"):
        st.markdown("""
        1. Cr√©ez un compte sur [Groq Console](https://console.groq.com/signup)
        2. Une fois connect√©, acc√©dez √† votre profil
        3. Allez dans la section "API Keys"
        4. Cliquez sur "Create API Key"
        5. Copiez la cl√© g√©n√©r√©e et collez-la dans le champ correspondant dans la barre lat√©rale
        """)
    
    with st.expander("ü§ó Comment obtenir une cl√© API Hugging Face"):
        st.markdown("""
        1. Cr√©ez un compte sur [Hugging Face](https://huggingface.co/join)
        2. Une fois connect√©, acc√©dez √† votre profil
        3. Allez dans la section "Settings" puis "Access Tokens"
        4. Cliquez sur "New token"
        5. Donnez un nom √† votre token et s√©lectionnez les permissions appropri√©es
        6. Copiez le token g√©n√©r√© et collez-le dans le champ correspondant dans la barre lat√©rale
        """)
    
    st.markdown("---")
    
    # Guide d'utilisation
    st.header("üìö Guide d'utilisation")
    
    tabs = st.tabs(["üöÄ D√©marrage", "üí¨ Chat", "üìù R√©sum√©", "üîä Audio", "üí° Conseils"])
    
    with tabs[0]:
        st.subheader("Comment d√©marrer avec DialogAI")
        st.markdown("""
        1. **Configuration des API**: Commencez par configurer vos cl√©s API dans la barre lat√©rale
        2. **Navigation**: Utilisez les boutons de la barre lat√©rale pour naviguer entre les diff√©rentes fonctionnalit√©s
        3. **Workflow**: Suivez le processus logique: Chat ‚Üí R√©sum√© ‚Üí Audio
        4. **S√©curit√©**: Vos cl√©s ne sont pas sauvegard√©es, saisissez-les √† chaque session
        """)
    
    with tabs[1]:
        st.subheader("Utilisation du chat")
        st.markdown("""
        1. Acc√©dez √† la page Chat depuis la barre lat√©rale
        2. Le mod√®le d'IA utilis√© est Gemma2-9b-It
        3. Tapez votre message dans le champ de saisie (en fran√ßais ou en anglais)
        4. L'assistant d√©tecte automatiquement la langue et r√©pond dans la m√™me langue
        5. Cliquez sur "Envoyer" pour obtenir une r√©ponse propre et bien format√©e
        6. Vous pouvez r√©sumer la r√©ponse directement
        """)
    
    with tabs[2]:
        st.subheader("Cr√©ation de r√©sum√©s")
        st.markdown("""
        1. Apr√®s avoir re√ßu une r√©ponse du chat, cliquez sur "R√©sumer cette r√©ponse"
        2. Acc√©dez √† la page R√©sum√©
        3. Cliquez sur "G√©n√©rer le r√©sum√©" pour cr√©er un r√©sum√© concis
        4. Le r√©sum√© s'affichera directement
        5. Utilisez le bouton "Convertir en audio" pour passer √† l'√©tape suivante
        """)
    
    with tabs[3]:
        st.subheader("Conversion en audio")
        st.markdown("""
        1. Apr√®s avoir g√©n√©r√© un r√©sum√©, acc√©dez √† la page Audio
        2. Vous verrez le texte du r√©sum√©
        3. Vous pouvez modifier le texte avant de g√©n√©rer l'audio
        4. La langue est d√©tect√©e automatiquement (fran√ßais ou anglais)
        5. Cliquez sur "G√©n√©rer l'audio" pour cr√©er un fichier audio
        6. √âcoutez l'audio directement ou t√©l√©chargez-le
        """)
    
    with tabs[4]:
        st.subheader("Conseils et astuces")
        st.markdown("""
        - **Pour de meilleurs r√©sum√©s**: Assurez-vous que la r√©ponse du chat soit claire et bien structur√©e
        - **Performances du chat**: Les r√©ponses peuvent prendre quelques secondes selon la complexit√© de votre question
        - **Qualit√© audio**: La synth√®se vocale fonctionne mieux avec des textes bien ponctu√©s
        - **S√©curit√©**: Vos cl√©s API ne sont jamais sauvegard√©es pour votre protection
        - **Navigation**: Tous les boutons de navigation fonctionnent correctement entre les pages
        """)
    
    st.markdown("---")
    
    # √Ä propos
    st.header("‚ÑπÔ∏è √Ä propos de DialogAI")
    st.markdown("""
    DialogAI est une application bilingue (fran√ßais/anglais) qui int√®gre plusieurs technologies d'IA:
    
    - **Chat IA**: Utilise le mod√®le Gemma2-9b-It via l'API Groq pour g√©n√©rer des r√©ponses intelligentes et propres
    - **R√©sum√© automatique**: Utilise le mod√®le BART de Facebook via l'API Hugging Face
    - **Synth√®se vocale**: Utilise la biblioth√®que gTTS (Google Text-to-Speech)
    
    üîí **S√©curit√© et confidentialit√©**: L'application ne sauvegarde aucune donn√©e personnelle ni cl√© API.
    
    L'application d√©tecte automatiquement la langue utilis√©e et adapte ses r√©ponses en cons√©quence.
    """)

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #777;">
    <p>¬© 2025 DialogAI | D√©velopp√© avec ‚ù§Ô∏è par AICHA OUSSEINI</p>
   
</div>
""", unsafe_allow_html=True)